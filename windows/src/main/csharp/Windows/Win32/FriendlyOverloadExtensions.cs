//<auto-generated />

namespace Windows.Win32
{
    using win32 = global::Windows.Win32;

    static partial class FriendlyOverloadExtensions
    {
        public static void GetAt<T>(this win32.UI.Shell.IObjectArray @this, uint uiIndex, out T ppv)
        {
            @this.GetAt(uiIndex, typeof(T).GUID, out var temp);
            ppv = (T)temp;
        }

        /// <inheritdoc cref="winmdroot.UI.Shell.IVirtualDesktopManager.GetWindowDesktopId(winmdroot.Foundation.HWND, global::System.Guid*)"/>
		public static unsafe global::System.Guid GetWindowDesktopId(this winmdroot.UI.Shell.IVirtualDesktopManager @this, winmdroot.Foundation.HWND topLevelWindow)
        {
            global::System.Guid desktopIdLocal = default;
            @this.GetWindowDesktopId(topLevelWindow, &desktopIdLocal);
            return desktopIdLocal;
        }

        /// <inheritdoc cref="winmdroot.UI.Shell.IVirtualDesktopManager.IsWindowOnCurrentVirtualDesktop(winmdroot.Foundation.HWND, winmdroot.Foundation.BOOL*)"/>
		public static unsafe winmdroot.Foundation.BOOL IsWindowOnCurrentVirtualDesktop(this winmdroot.UI.Shell.IVirtualDesktopManager @this, winmdroot.Foundation.HWND topLevelWindow)
        {
            winmdroot.Foundation.BOOL onCurrentDesktopLocal = default;
            @this.IsWindowOnCurrentVirtualDesktop(topLevelWindow, &onCurrentDesktopLocal);
            return onCurrentDesktopLocal;
        }
    }
}
